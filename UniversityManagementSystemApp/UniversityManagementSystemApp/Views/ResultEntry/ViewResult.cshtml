@model IEnumerable<UniversityManagementSystemApp.Models.ViewModel.ViewResultModel>

@{
    ViewBag.Title = "View Result";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<div id="PDFContainer">

    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        <div class="form-horizontal">
            <h2>View Result</h2>

            <hr />
            @Html.ValidationSummary(true)

            <div class="form-group">
                @*@Html.Label("StudentId", new { @class = "control-label col-md-2" })*@
                <div class="col-md-10">
                    @Html.DropDownList("StudentId", String.Empty)
                    @*@Html.ValidationMessageFor(model => model.StudentId)*@
                    <div id="StudentSelectionError">

                    </div>
                </div>
            </div>
            <h2>ADFG</h2>
            <label>Name</label>
            <div id="Name">

            </div>

            <label>Email</label>
            <div id="Email">

            </div>
            <label>Dept. </label>
            <div id="Dept">

            </div>
        </div>
    }

    <button onclick="javascript:demoFromHTML();">Make PDF</button>
    <div id="ViewEnrolledCoursesAndResult">

    </div>
</div>
<div>
    @Html.ActionLink("Back to List", "Index")
</div>

@section Scripts {
    @Scripts.Render("~/bundles/jqueryval")
    <script src="~/Scripts/jspdf.debug.js"></script>
    <script type="text/javascript">
        $(document).ready(function() {
            $("#StudentId").change(function() {
                var optionSelected = $(this).find("option:selected");
                var valueSelected = optionSelected.val();
                if (valueSelected) {
                    var json = { studentId: valueSelected };
                    $.ajax({
                        type: "POST",
                        url: '@Url.Action("GetStudentInfo", "EnrollCourse")',
                        contentType: "application/json; charset=utf-8",
                        data: JSON.stringify(json),
                        dataType: "json",
                        success: function(data) {
                            $("#Name").html(data.Name);
                            $("#Email").html(data.Email);
                            $("#Dept").html(data.Dept);
                            var id = $("#StudentId").val();
                            //alert(id);
                            $("#ViewEnrolledCoursesAndResult").load("/ResultEntry/GetEnrollCourseAndResult", { studentId: id });
                            var options = $("$StudentId").find("option:selected");
                            var regNoText = options.text();
                            $('h2').html("Result view for " + regNoText);
                        }
                    });
                } else {
                    $("#StudentSelectionError").show().text("Please select a student.").addClass("btn-danger").fadeOut(4000);
                    $("#Name").val("");
                    $("#Email").val("");
                    $("#Dept").val("");
                }
            });
        });
    function demoFromHTML() {
        //alert(7);
        var pdf = new jsPDF('p', 'pt', 'letter');
        // source can be HTML-formatted string, or a reference
        // to an actual DOM element from which the text will be scraped.
        source = $('#PDFContainer')[0];

        // we support special element handlers. Register them with jQuery-style
        // ID selector for either ID or node name. ("#iAmID", "div", "span" etc.)
        // There is no support for any other type of selectors
        // (class, of compound) at this time.
        specialElementHandlers = {
            // element with id of "bypass" - jQuery style selector
            '#bypassme': function (element, renderer) {
                // true = "handled elsewhere, bypass text extraction"
                return true;
            }
        };
        margins = {
            top: 80,
            bottom: 60,
            left: 40,
            width: 522
        };
        // all coords and widths are in jsPDF instance's declared units
        // 'inches' in this case
        pdf.fromHTML(
            source, // HTML string or DOM elem ref.
            margins.left, // x coord
            margins.top, {
                // y coord
                'width': margins.width, // max width of content on PDF
                'elementHandlers': specialElementHandlers
            },
            function (dispose) {
                // dispose: object with X, Y of the last line add to the PDF
                //          this allow the insertion of new lines after html
                pdf.save('ViewResult.pdf');
            }, margins);
    }
    </script>
}
